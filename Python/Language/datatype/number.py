#! /usr/bin/python3

'''
1.Python语言中的数字类型：
（1）Python数字数据类型用于存储数值。数据类型是不允许改变的，这就意味着如果改变数字数据类型的值，
     将重新分配内存空间。
（2）使用del语句可以删除一些数字对象的引用。
（3）可以使用十六进制和八进制来代表整数。Python中十六进制数以0x开头，八进制数以0o开头。
'''

"""
2.Python支持3种不同的数值类型：
（1）整型int：通常被称为是整型或整数，是正或负整数，不带小数点。Python3整型是没有限制大小的，
     可以当作Long类型使用，所以Python3没有Python2的Long类型。布尔类型bool是整型的子类型。
（2）浮点型float：浮点型由整数部分与小数部分组成，浮点型也可以使用科学计数法表示（2.5e2 = 2.5 x 102 = 250）。
（3）复数complex：复数由实数部分和虚数部分构成，可以用a + bj或者complex(a,b)表示，复数的实部a和虚部b都是浮点型。
"""

"""
3.Python数字类型转换：
（1）int(x)：将x转换为一个整数。
（2）float(x)：将x转换到一个浮点数。
（3）complex(x)：将x转换到一个复数，实数部分为x虚数部分为0。
（4）complex(x,y)：将x和y转换到一个复数，实数部分为x，虚数部分为y。x和y是数字表达式。
（5）数据类型的转换只需要将数据类型作为函数名即可。
"""

'''
4.Python数字运算：
（1）Python解释器可以作为一个简单的计算器，在解释器里输入一个表达式，它将输出表达式的值。
（2）Python中表达式的语法很直白： 加+、减-、乘*、除/与其它语言里一样。注意在不同的机器上
     浮点运算的结果可能会不一样。
（3）在整数除法中，除法/总是返回一个浮点数。如果只想得到整数的结果，丢弃可能的分数部分，
     可以使用取整运算符//。
（4）取整运算//得到的并不一定是整数类型的数，它与分母分子的数据类型有关系。
（5）等号=用于给变量赋值。赋值之后，除了下一个提示符，解释器不会显示任何结果。
（6）Python可以使用**操作来进行幂运算。
（7）变量在使用前必须先定义，即赋予变量一个值，否则会出现错误。
（8）不同类型的数混合运算时，会将整数转换为浮点数。
（9）在交互模式中，最后被输出的表达式结果被赋值给变量"_"。此时"_"变量应被用户视为只读变量。
'''

flag = True                   # 浮动数
counter = 5                   # 整型变量。
pi = 3.14                     # 浮点型变量
z = 3 + 4j                    # 复数

length = 0xA2F                # 十六进制整数
size = 0o725                  # 八进制整数

#print默认输出是换行的，如果要实现不换行需要在变量末尾加上end=""：
print(flag,end="")
print("")                     #单独换行

del flag                 #可以通过使用del语句删除单个或多个对象的引用
# print("flag =",flag)   #被del删除了的对象引用，不可以再继续使用，解释器会报错。尝试访问一个未定义的变量，解释器也会报错。

print("counter =",counter)
print("pi =",pi)
print("z =",z)

print("length =",length)
print("size =",size)
print("int(pi) =",int(pi))    #将浮动类型转换为整型，会直接丢掉小数点部分。

num = 10 * 2 + \
	  20 / 2 - \
	  30 % 8

#Python通常是一行写完一条语句，但如果语句很长，可以使用反斜杠\来实现一条语句续行。
print("num =",num)

x = input("Please input number x: ")
y = input("Please input number y: ")
print(x,"+",y,"=",int(x)+int(y))        #input()函数返回值是字符串类型，需要转换为整型，才能做数值加减运算。

score = 85                     #变量赋值时Number对象将被创建。
print("score =",score)

#缩进相同的一组语句构成一个代码块，我们称之代码组。
if 90 <= score and score <= 100:
	print("excellent")
elif 80 <= score and score < 90:
	print("good")
elif 70 <= score and score < 80:
	print("average")
elif 60 <= score and score < 70:
	print("passed")
else:
	print("poor")
	
print("17 / 3 =",17 / 3)          # 整数除法总是返回一个浮点数
print("17 // 3 =",17 // 3)        # 整数取整运算符//返回向下取整后的结果
print("17 % 3 =",17 % 3)          # 整数取余操作符％返回除法的余数

print("5 ** 2 =",5 ** 2)          # 使用**操作来进行幂运算。