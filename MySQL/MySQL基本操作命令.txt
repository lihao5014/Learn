0.mysql中的四种注释:
 （1）单行注释：select * from students; -- 查看完整表格（注意"-- "后面是有一个空格的）
 （2）单行注释：select * from students; #查看完整表格
 （3）多行注释：select * from students; /*查看完整表格*/
 （4）内联注释：select * from students; /*!查看完整表格*/（一般不使用内联注释）

1.打开MySQL数据库：
（1）mysql -u root -p
（2）mysql -u root -p 123456

2.退出MySQL数据库：
（1）quit
（2）exit

3.帮助命令：
  help               -- help命令的语法格式：help 查询内容。（查询内容中可以包含通配符“％”和“_”，效果与LIKE运算符执行的模式匹配操作含义相同）
  help 'contents'    -- 查看帮助文档的目录列表。（查询内容中不区分大小写）
  help 'data types'  -- 查看MySQL所支持的数据类型。（查询内容可以使单引号引起来，也可以不使用单引号，为避免歧义，最好使用单引号引起来）

4.显示所有数据库：
  show databases;

5.创建数据库：
  create database testdb;

6.删除数据库：
  drop database testdb;

7.选择数据库：
  use testdb;

8.显示选择数据库名称：
  select database();

9.查看数据库中保存的所有表名：
  show tables;

10.创建表格：
（1）create table student(id integer,name varchar(8));
（2）create table student(id int primary key,name varchar(8));
（3）create table student(id int,name varchar(8),primary key(id));
（4）create table student(
		id int unsigned auto_increment,      #auto_increment定义列为自增的属性，一般用于主键，数值会自动加1。
		name varchar(8) not null,            #如果你不想字段为NULL可以设置字段的属性为NOT NULL，在操作数据库时如果输入该字段的数据为NULL，就会报错。
		primary key(id)                      #primary key关键字用于定义列为主键。可以使用多列来定义主键，列间以逗号分隔。
     )engine=innodb default charset =utf8;   #engine设置存储引擎，charset设置编码。

11.更改表名：
（1）rename table student to students;
（2）alter table student rename to students;

12.删除表格：
  drop table students;

13.查看表格结构：
（1）desc students;
（2）describe students;

14.表格增加一列：
  alter table students add age integer;           -- 在末尾添加字段
  alter table students add age integer first;     -- 在开头添加字段
  alter table students add age integer after id;  -- 在中间位置添加字段（注意只能在某个已有字段的后面添加新字段，不能在它的前面添加新字段）

15.表格删除一列：
  alter table students drop age;

16.表格插入一行：
  （1）insert into students values(1,"amy",25);    -- 插入一行完整数据
  （2）insert into students(id,age) values(1,25);  -- 插入一行部分数据，缺省字段使用NULL补齐。但如果缺省字段使用了auto_increment自动增加属性，那么就不会自动填充NULL
  （3）insert info students values(1,"amy",25),(2,"bob",26),(3,"lisa",24);     -- 一次性插入多个值

17.表格删除一行：
  delete from students where id = 1;
  delete from students;                -- 清空表格数据，但是不会删除表格

18.表格更新一行：
  update students set name = "lisa" where name = "amy";     -- 条件插入
  update students set c_id =2 where s_id in(1,3,5);         -- 集合插入
  update students set name ='amy',age =25 where id =1;    -- 一次更新多个字段

19.查看表格中的所有内容：
  select * from students;  -- 星号'*'用来代替students表格中的所有字段。

20.查看表格一列内容：
  select name from students;
  select name ,age from students;        -- 查看多列内容
  select distinct name from students;    -- 从结果中删除重复行。

21.查看表格一行内容：
  select * from students where name = "amy";            -- 单一条件的查询语句
  select * from students where age > 25 and age < 28;   -- 多个查询条件时用逻辑运算符and(&&)、or(||)或xor隔开。
  select * from students where name like 'j%';          -- 模糊查找名字以‘j’开头的学生信息，并且不区分大小写。
  select * from students where name like binary 'J%';   -- 模糊查找名字以‘J’开头的学生信息，并且区分大小写。
  select * from students where id in(1,3,5,7);          -- 传入集合参数快速查询
  select * from students where id not in(1,3,5,7);
	
22.限制查看数据行数：
  select * from students where id < 5 limit 3;    -- limit关键字不指定初始位置时，记录从第一条记录开始显示。显示记录的条数由limit关键字指定。
  select * from students limit 4,3;               -- limit关键字指定查询结果从哪条记录开始显示，显示多少条记录
  select * from students limit 3 offset 4;        -- limit 记录数 offset 初始位置。

23.启动MySQL服务：
  net start mysql

24.关闭MySQL服务：
  net stop mysql

25.修改表格添加主键：
  alter table students add primary key(id);

26.对查询结果进行排序：
（1）select * from students order by age;
（2）select * from students order by age asc;    -- 默认升序排列
（3）select * from students order by age desc;   -- 降序排列
（4）select * from students order by name,age;   -- 先按name、再按age，进行多字段排序

27.表格导出为文本数据：
  select * from students into outfile "C:/Users/Administrator/Desktop/students.txt";

28.导入文本数据到表格：
  load data infile "C:/Users/Administrator/Desktop/students.txt" into table students;

29.复制表格结构：
  create table students_copy like students;
  create table students_copy select * from students;     -- 复制表格结构及其中的数据

30.开始事务：（MySQL命令行的中默认事务都是自动提交的）
（1）begin;               #开启事务以后，如果一个终端中的修改没有commit，那么另外一个终端中不会看到该修改  
（2）start transaction;   #begin开启事务只对一次commit/rollback有效，commit/rollback以后begin开启的事务就默认被关闭了。

31.事务确认提交：（SQLite数据库中可以使用begin transaction开启事务/end transaction提交事务，但MySQL中没有这两条语句）
（1）commit;
（2）commit work;

32.事务回滚：
（1）rollback;
（2）rollback work;

33.禁止事务自动提交：
  set autocommit =0;    #相当于一直执行begin命令开启事务，单次commit/rollback不会导致事务关闭。

34.开启事务自动提交：
  set autocommit =1;

35.显示所有存储引擎：
  show engines;

36.查看所有数据库容量大小：
  select 
  table_schema as '数据库',
  sum(table_rows) as '记录数',
  sum(truncate(data_length/1024/1024, 2)) as '数据容量(MB)',
  sum(truncate(index_length/1024/1024, 2)) as '索引容量(MB)' 
  from information_schema.tables 
  group by table_schema 
  order by sum(data_length) desc, sum(index_length) desc;

37.查看所有数据库各表容量大小:
  select 
  table_schema as '数据库',
  table_name as '表名',
  table_rows as '记录数',
  truncate(data_length/1024/1024, 2) as '数据容量(MB)',
  truncate(index_length/1024/1024, 2) as '索引容量(MB)' 
  from information_schema.tables 
  order by data_length desc, index_length desc;

38.查看指定数据库容量大小:
  select 
  table_schema as '数据库',
  sum(table_rows) as '记录数',
  sum(truncate(data_length/1024/1024, 2)) as '数据容量(MB)',
  sum(truncate(index_length/1024/1024, 2)) as '索引容量(MB)' 
  from information_schema.tables 
  where table_schema='testdb';

39.查看指定数据库各表容量大小:
  select 
  table_schema as '数据库',
  table_name as '表名',
  table_rows as '记录数',
  truncate(data_length/1024/1024, 2) as '数据容量(MB)',
  truncate(index_length/1024/1024, 2) as '索引容量(MB)' 
  from information_schema.tables 
  where table_schema='testdb' 
  order by data_length desc, index_length desc;

40.执行sql脚本的两种方法：
（1）mysql -uroot –p123456 -Dtestdb < C:/Users/Administrator/Desktop/test.sql  #如果在sql脚本文件中使用了use数据库，则-D数据库选项可以忽略
（2）source C:/Users/Administrator/Desktop/test.sql

41.导出数据库到sql文件中：（mysqldump是在cmd下的命令，不能在mysql下运行，如果进入了mysql，得先退出mysql后才可以执行）
（1）mysqldump -u root -p123456 testdb > C:/Users/Administrator/Desktop/test.sql           #导出完整的数据库结构和内容时不用加-d
（2）mysqldump -u root -p -d testdb > C:/Users/Administrator/Desktop/test.sql              #只导出数据库表结构时要加-d
（3）mysqldump -u root -p123456 testdb students > C:/Users/Administrator/Desktop/test.sql  #导出某张表结构和数据时不用加-d
（4）mysqldump -u root -p -d testdb students > C:/Users/Administrator/Desktop/test.sql     #导出某张表结构时要加-d

42.MySQL支持的6种约束：（一个数据表中只能有一个主键约束，其它5种约束可以有多个）
（1）主键约束(primary key)：是使用最频繁的约束。在设计数据表时，一般情况下都会要求表中设置一个主键。
     主键是表的一个特殊字段，该字段能唯一标识该表中的每条信息。
（2）外键约束(foreign key)：用来建立主表与从表的关联关系，为两个表的数据建立连接，约束两个表中数据的一致性和完整性。
     对于两个具有关联关系的表而言，相关联字段中主键所在的表就是主表/父表，外键所在的表就是从表/子表。
（3）唯一约束(unique key)：与主键约束有一个相似的地方，就是它们都能够确保列的唯一性。与主键约束不同的是，
     唯一约束在一个表中可以有多个，并且设置唯一约束的列是允许有空值的，虽然只能有一个空值。
（4）检查约束(check)：是用来检查数据表中，字段值是否有效的一个手段。可以用检查约束来限定表中的字段范围，以减少无效数据的输入。
（5）非空约束(not null)：用来约束表中的字段不能为空。
（6）默认值约束(default)：用来约束当数据表中某个字段不输入值时，自动为其添加一个已经设置好的值。默认值约束通常
     用在已经设置了非空约束的列，这样能够防止数据表在录入数据时出现错误。

43.使用主键的注意事项：
（1）每个表只能定义一个主键。
（2）主键值必须唯一标识表中的每一行，且不能为NULL，即表中不可能存在有相同主键值的两行数据。这是唯一性原则。
（3）一个字段名只能在联合主键字段表中出现一次。
（4）联合主键不能包含不必要的多余字段。当把联合主键的某一字段删除后，如果剩下的字段构成的主键仍然满足唯一性原则，
     那么这个联合主键是不正确的。这是最小化原则。

44.在修改表时添加主键约束：
	alter table students add primary key(id);

45.删除主键约束：（删除主键约束的方法要比创建主键约束容易的多。由于主键约束在一个表中只能有一个，因此不需要指定主键名就可以删除一个表中的主键约束）
	alter table students drop primary key;

46.主键自增长：（在MySQL中当主键定义为自增长后，这个主键的值就不再需要用户输入数据了，而由数据库系统根据定义自动赋值。每增加一条记录，主键会自动以相同的步长进行增长）
	create table students(id int auto_increment,name char,primary key(id));

47.指定自增字段初始值：
   create table students(id int not null auto_increment,name char,primary key(id)) auto_increment=100;   -- 指定主键从100开始自增长
	
48.使用主键自增长的注意事项：
（1）默认情况下，auto_increment的初始值是1，每新增一条记录，字段值自动加1。
（2）一个表中只能有一个字段使用auto_increment约束，且该字段必须有唯一索引，以避免序号重复（即为主键或主键的一部分）。
（3）auto_increment约束的字段必须具备not null属性。
（4）auto_increment约束的字段只能是整数类型（tinyint、smallint、int、bigint等）。
（5）auto_increment约束字段的最大值受该字段的数据类型约束，如果达到上限，auto_increment就会失效。
（6）加上auto_increment约束条件后，字段中的每个值都是自动增加的。因此这个字段不可能出现相同的值。
     通常情况下auto_increment都是作为id字段的约束条件，并且将id字段作为表的主键。

49.使用外键的注意事项：
（1）主表必须已经存在于数据库中，或者是当前正在创建的表。如果是后一种情况，则主表与从表是同一个表，
     这样的表称为自参照表，这种结构称为自参照完整性。
（2）从表的外键关联的必须是主表的主键，且主键和外键的数据类型必须一致。所以必须为主表定义主键。
（3）主键不能包含空值，但允许在外键中出现空值。也就是说只要外键的每个非空值出现在指定的主键中，
     这个外键的内容就是正确的。
（4）在主表的表名后面指定列名或列名的组合。这个列或列的组合必须是主表的主键或候选键。
（5）外键中列的数目必须和主表的主键中列的数目相同。
（6）外键中列的数据类型必须和主表主键中对应列的数据类型相同。
（7）主表删除某条记录时，从表中与之对应的记录也必须有相应的改变。一个表可以有一个或多个外键，外键可以为空值，
     若不为空值，则每一个外键的值必须等于主表中主键的某个值。

50.在创建表时设置外键约束：
（1）主表：create table department(id int primary key,name varchar(20) not null,location varchar(20));
（2）从表：create table employee(
				id int primary key,
				name varchar(20),
				deptId int,
				salary double,
				foreign key(deptId) references department(id)
		   );

51.在修改表时添加外键约束：（外键是表中的一列，它的值必须在另一个表的主键中，外键是保证引用完整性的极其重要部分）
	alter table employee add foreign key(deptId) references department(id);
	
52.删除外键约束：（当一个表中不需要外键约束时，就需要从表中将其删除。外键一旦删除，就会解除主表和从表间的关联关系）
	alter table employee drop foreign key employee_ibfk_1;   -- 由于外键约束在一个表中可以有多个，因此需要指定外键名来删除一个表中的外键约束

53.在创建表时设置唯一约束：（唯一约束可以在创建表时直接设置，通常设置在除了主键以外的其它列上）
	create table students(id integer primary key,name varchar(20) unique);

54.在修改表时添加唯一约束：
	alter table students add constraint unique_name unique(name);

55.删除唯一约束:
	alter table students drop index unique_name;
	drop index unique_name on students;
	
56.在创建表时设置检查约束:（在更新表数据的时候，系统会检查更新后的数据行是否满足check约束中的限定条件）
	create table students(id integer primary key,name varchar(20),age int,check(age > 0 and age < 100));

57.在修改表时添加检查约束:
	alter table students add constraint check_age check(age > 0 and age < 100);

58.删除检查约束：
	alter table students drop check check_age;

59.在创建表时设置默认值约束：
	create table students(id int primary key auto_increment,name varchar(20) default 'amy');

60.在修改表时添加默认值约束:
	alter table students change column age age integer default 25;

61.删除默认值约束:
	alter table students change column age age integer default NULL;

62.在创建表时设置非空约束:
	create table students(id int primary key,name varchar(20) not null);

63.在修改表时添加非空约束:
	alter table students change column name name varchar(20) not null;

64.删除非空约束:
	alter table students change column name name varchar(20) null;

65.查看建表语句：（查看数据表中的约束）
	show create table students;

66.查看表格中的所有约束：
	show keys from students;
	
67.为表格设置别名：
	select stu.id,stu.name from testdb.students as stu;
	select stu.s_id,stu.s_name from testdb.students stu;   -- 字段或表格取别名时，as关键字可以省略

68.为字段指定别名:
	select id,name,2021-age as brithday from testdb.students;

69.like模糊查询:
（1）like关键字支持百分号“%”和下划线“_”通配符。通配符是一种特殊语句，主要用来模糊查询。
     当不知道真正字符或者懒得输入完整名称时，可以使用通配符来代替一个或多个真正的字符。
	 使用百分号“%”或下划线“_”通配符进行模糊查找时，匹配的字符串必须加单引号或双引号。
（2）带有“%”通配符的查询：“%”是MySQL中最常用的通配符，它能代表任何长度的字符串，字符串的长度可以为0。
     百分号“%”通配符可以到匹配任意字符，但是不能匹配NULL。
（3）带有“_”通配符的查询：_”只能代表单个字符，字符的长度不能为0。
（4）区分大小写的模糊查询：默认情况下like匹配字符的时候是不区分大小写的。如果需要区分大小写，可以加入binary关键字。
（5）如果查询内容中包含通配符，可以使用“\”转义符。

70.“%”和“_“通配符的常用方法：
	'%java'      //以java字符串结尾的信息
	'java%'      //以java字符串开头的信息
	'%java%'     //含有java字符串的信息
	'_java'      //长度为5，以java字符串结尾的信息
	'java_'      //长度为5，以java字符串开头的信息
	'_java_'     //长度为6，含有java字符串的信息

71.范围查询：
	select * from students where age between 25 and 28;
	select * from students where age not between 25 and 28;

72.空值查询:
	select * from students where age is null;       -- is null是一个整体，不能将is换成“=”。
	select * from students where age is not null;   -- is not null是一个整体，不能将is not换成“!=”或“<>”。

73.分组查询：
	select * from students group by sex;                                  #单独使用group by关键字时，查询结果会只显示每个分组的第一条记录
	select sex,group_concat(name) as allName from students group by sex;  #使用group_concat()函数将每个分组的name字段的值都显示出来
	select sex,count(id) from students group by sex;                      #group by关键字经常和count(),sum(),avg(),min(),max()等聚合函数一起使用。
	select sex,avg(age) as average_age from students group by sex;        #统计每个性别的平均年龄
	select sex,group_concat(name) from students group by sex with rollup; #with rollup关键字用来在所有记录的最后加上一条记录，这条记录是上面所有记录的总和，即统计记录数量
	
74.where和having关键字的区别：
（1）一般情况下，where用于过滤数据行，而having用于过滤分组。
（2）where查询条件中不可以使用聚合函数，而having查询条件中可以使用聚合函数。
（3）where在数据分组前进行过滤，而having在数据分组后进行过滤 。
（4）where针对数据库文件进行过滤，而having针对查询结果进行过滤。即where根据
     数据表中的字段直接进行过滤，而having是根据前面已经查询出的字段进行过滤。
（5）where查询条件中不可以使用字段别名，而having查询条件中可以使用字段别名。

75.过滤分组：
	select name,sex,age from students having age > 25 and age < 28;  -- 如果select关键字后，没有查询出having查询条件中使用的age字段，MySQL会运行报错。
	select name,sex from students where age > 25 and age < 28;              -- 正常运行
	select name,sex from students having age > 25 and age < 28;             -- 运行报错
	select group_concat(name),sex,age from students group by age where avg(age) > 25;    -- 如果在where查询条件中使用聚合函数，MySQL会运行报错。
	select group_concat(name),sex,age from students group by age having avg(age) > 25;   -- 正常运行

76.连接查询：（在MySQL中多表查询主要有交叉连接、内连接和外连接）
（1）交叉连接(cross join)：一般用来返回连接表的笛卡尔积。多个表交叉连接时，在from后连续使用cross join或","即可。
	 当连接的表之间没有关系时，我们会省略掉where子句，此时返回结果就是两个表的笛卡尔积，返回结果数量就是两个表
	 的数据行相乘。如果在交叉连接时使用where子句，MySQL会先生成两个表的笛卡尔积，然后再选择满足where条件的记录。
	 因此表的数量较多时，交叉连接会非常非常慢，而且得到的运行结果也没太大的意义。一般情况下不建议使用交叉连接。
（2）内连接(inner join)：主要通过设置连接条件的方式，来移除查询结果中某些数据行的交叉连接。简单来说就是利用
     条件表达式来消除交叉连接的某些数据行。内连接使用inner join关键字连接两张表，并使用on子句来设置连接条件。
	 如果没有连接条件，inner join和cross join在语法上是等同的，两者可以互换。inner join也可以使用where子句
	 指定连接条件，但是inner join ... on语法是官方的标准写法，而且where子句在某些时候会影响查询的性能。
（3）外连接：内连接的查询结果都是符合连接条件的记录，而外连接会先将连接的表分为基表和参考表，再以基表为依据
     返回满足和不满足条件的记录。外连接可以分为左外连接和右外连接。外连接查询时，可以查询出“基表”中的所有记录
	 和“参考表”中匹配连接条件的记录。如果“基表”的某行在“参考表”中没有匹配行，那么在返回结果中，“参考表”的字段
	 值均为空值NULL。使用外连接查询时，一定要分清需要查询的结果，是需要显示左表的全部记录还是右表的全部记录，
	 然后选择相应的左连接和右连接。
（4）左连接(left outer join)：左外连接又称为左连接，使用left outer join关键字连接两个表，并使用on子句来设置连接条件。
     在左连接中left outer join关键字前面的表格为基表，后面的表格为参考表。
（5）右连接(right outer join)：右外连接又称为右连接，右连接是左连接的反向连接。使用right outer join关键字连接两个表，
     并使用on子句来设置连接条件。在左连接中right outer join关键字前面的表格为参考表，后面的表格为基表。
（6）当对多个表进行查询时，要在select语句后面指定字段是来源于哪一张表。因此在多表查询时select语句后面的写法是“表名.列名”。
     另外如果表名非常长的话，也可以给表设置别名，这样就可以直接在select语句后面写上表的“别名.列名”。
（7）交叉连接——相当于取两个表的笛卡尔积；内连接——相当于取两个表格的交集；外连接——相当于取两个差集。

77.交叉连接查询：（当表中的数据较多时，得到的运行结果会非常长，所以通过交叉连接的方式进行多表查询的这种方法并不常用，应该尽量避免这种查询）
	select * from students cross join courses;
	select * from students,courses;                                        -- cross join关键字可以省略
	select * from students,courses where students.c_id = courses.c_id;
	select x.s_id,x.s_name,y.* from students as x cross join courses as y where x.c_id = y.c_id;
	
78.内连接查询：（内连接中可以省略inner关键字，只用关键字join。多个表内连接时，在from后连续使用inner join或join即可）
	select * from students inner join courses on students.c_id = courses.c_id;
	select x.s_id,x.s_name,y.* from students as x join courses as y on x.c_id = y.c_id;     -- 内连接inner关键字可以省略
	select students.s_id,students.s_name,courses.* from students join courses where students.c_id = courses.c_id;

79.左连接查询：（左连接中可以省略outer关键字，只使用关键字left join）
	select * from students left outer join courses on students.c_id = courses.c_id;
	select x.s_id,x.s_name,y.* from students as x left join courses as y on x.c_id = y.c_id;

80.右连接查询：（右连接中可以省略outer关键字，只使用关键字right join）
	select * from students right outer join courses on students.c_id = courses.c_id;
	select x.s_id,x.s_name,y.* from students as x right join courses as y on x.c_id = y.c_id;

81.子查询：
（1）子查询是MySQL中比较常用的查询方法，通过子查询可以实现多表查询。子查询指将一个查询语句嵌套在另一个查询语句中。
     子查询可以在select、update和delete语句中使用，而且可以进行多层嵌套。在实际开发时，子查询经常出现在where子句中。
（2）子查询的功能也可以通过表连接完成，但是子查询会使SQL语句更容易阅读和编写。一般来说表连接（内连接和外连接等）都
     可以用子查询替换，但反过来却不一定，有的子查询不能用表连接来替换。子查询比较灵活、方便、形式多样，适合作为查询
	 的筛选条件，而表连接更适合于查看连接表的数据。
（3）外层的select查询称为父查询，圆括号中嵌入的查询称为子查询，子查询必须放在圆括号内。MySQL在处理select语句时，
     执行流程为：先执行子查询，再执行父查询。
（4）in/not in子查询：当表达式与子查询返回的结果集中的某个值相等时，返回true，否则返回false；
     若使用关键字not，则返回值正好相反。
（5）exists/not exists子查询：用于判断子查询的结果集是否为空，若子查询的结果集不为空，返回true，否则返回false；
     若使用关键字not，则返回的值正好相反。exists关键字可以和其它查询条件一起使用，条件表达式与exists关键字之间
	 用and和or连接。
（6）子查询语句可以嵌套在SQL语句中任何表达式出现的位置。在select语句中，子查询可以被嵌套在select语句的列、表和查询条件中，
     即select子句、from子句、where子句、group by子句和having子句。
（7）只出现在子查询中而没有出现在父查询中的表不能包含在输出列中。多层嵌套子查询的最终数据集只包含父查询（即最外层的查询）
     的select子句中出现的字段，而子查询的输出结果通常会作为其外层子查询数据源或用于数据判断匹配。

82.in子查询：
	select * from students where s_age in (select max(s_age) from students);          -- 查询学生表中年龄最大学生的信息
	select * from students where students.c_id in (select courses.c_id from courses where c_name ='c++');
	select * from students where students.c_id = (select courses.c_id from courses where c_name ='c++');     -- in关键字可以使用"="代替
	select * from students as x where x.c_id not in (select y.c_id from courses as y where y.c_name='c++');
	select * from students as x where x.c_id <> (select y.c_id from courses as y where y.c_name='c++');      -- not in关键字可以使用"<>"代替
	
83.exists子查询：
	select * from students where exists(select c_name from courses where c_name ="c++");    -- 如果courses表格中存在c++课程，那么就完全打印students表格
	select * from students where s_age>25 and exists(select c_name from courses where c_name ="c++");

84.子查询嵌套在select子句中：（子查询结果为单行单列，但不必指定列别名）
	select courses.*,(select count(c_id) from students where students.c_id = courses.c_id) as students_count from courses;  -- 每门课程学习的学生数

85.子查询嵌套在from子句中：（必须为表指定别名。一般返回多行多列数据记录，可以当作一张临时表）
	select courses.*, temp.avgage from courses,(select c_id,avg(s_age) avgage from students group by c_id) temp where temp.c_id = courses.c_id;    -- 每门课程学生的平均年龄

86.修改表格默认字符集：
	alter table students charset utf8;

87.sql执行顺序：（所有的查询语句都是从from开始执行的，在执行过程中每个步骤都会为下一个步骤生成一个虚拟表，该虚拟表将作为下一个执行步骤的输入）
（1）from
（2）join
（3）on
（4）where
（5）group by(开始使用select中的别名，后面的语句中都可以使用)
（6）avg,sum....
（7）having
（8）select
（9）distinct
（10）order by
（11）limit

 第1步：首先对from子句中的前两个表执行一个笛卡尔乘积，此时生成虚拟表vt1（选择相对小的表做基础表）。
 第2步：接下来便是应用on筛选器，on中的逻辑表达式将应用到vt1中的各个行，筛选出满足on逻辑表达式的行，生成虚拟表vt2。
 第3步：如果是outer join那么这一步就将添加外部行，left outer jion就把左表在第二步中过滤的添加进来，
        如果是right outer join那么就将右表在第二步中过滤掉的行添加进来，这样生成虚拟表vt3。
 第4步：如果from子句中的表数目多余两个表，那么就将vt3和第三个表连接从而计算笛卡尔乘积，生成虚拟表，
        该过程就是一个重复1-3的步骤，最终得到一个新的虚拟表vt3。 
 第5步：应用where筛选器，对上一步生产的虚拟表引用where筛选器，生成虚拟表vt4。
 第6步：应用group by子句将中的唯一的值组合成为一组，得到虚拟表vt5。如果应用了group by，那么后面的所有步骤
        都只能得到的vt5的列或者是聚合函数（count、sum、avg等），原因在于最终的结果集中只为每个组包含一行。 
 第7步：应用cube或者rollup选项，为vt5生成超组，生成vt6。
 第8步：应用having筛选器生成vt7。having筛选器是第一个也是为唯一一个应用到已分组数据的筛选器。 
 第9步：处理select子句。将vt7中的在select中出现的列筛选出来生成vt8. 
 第10步：应用distinct子句，vt8中移除相同的行生成vt9。事实上如果应用了group by子句那么distinct是多余的，
         因为分组的时候是将列中唯一的值分成一组，同时只为每一组返回一行记录，那么所得的记录都将是不相同的。 
 第11步：应用order by子句。按照order_by_condition排序vt9，此时返回的一个游标，而不是虚拟表。sql是基于集合的理论的，
         集合不会预先对他的行排序，它只是成员的逻辑集合，成员的顺序是无关紧要的。对表进行排序的查询可以返回一个对象，
 		这个对象包含特定的物理顺序的逻辑组织，该对象就叫游标。正因为返回值是游标，那么使用order by子句查询不能应用
 		于表表达式。排序是很需要成本的，除非你必须要排序，否则最好不要指定order by，最后在这一步中是第一个也是唯一
 		一个可以使用select列表中别名的步骤。 
 第12步：应用limit选项。此时才返回结果给请求者即用户。
