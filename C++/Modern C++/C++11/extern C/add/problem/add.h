/*1.nm命令：
 *（1）nm命令是Linux下自带的强大的文本分析工具，其命令来源于name的简写。nm命令用来列出指定文件中的函数名、变量
 *     以及这些符号存储的区域等信息。
 *（2）nm命令用于显示指定文件中的符号信息。文件可以是对象文件、可执行文件或库文件。如果文件中没有包含符号信息，
 *     nm会报告该情况，单不把他解释为出错。nm缺省情况下报告十进制符号表示法下的数字值。
 *（3）nm命令用于将二进制文件或可执行文件进行剖析。
 */

/*2.nm命令常用选项：
 *（1）A/-o/--print-file-name：打印出每个符号属于的文件。
 *（2）-a/--debug-syms：打印出所有符号，包括debugger-only符号。
 *（3）-B/–format=bsd：BSD码显示，兼容MIPS nm。
 *（4）-C/--demangle[=style]：对低级符号名称进行解码，可以使得C++函数名更具可读性。
 *（5）--no-demangle：不对低级符号名称进行解码，默认参数。
 *（6）-D/--dynamic：显示动态符号而不显示普通符号，一般用于动态库。
 *（7）-f format/--format=format：使用format指定的格式输出，默认为bsd，可选为sysv和posix。
 *（8）-g/--extern-only：仅显示外部符号。
 *（9）-h/--help：显示命令的帮助信息。
 *（10）-n/-v/--numeric-sort：显示的符号以地址排序，而不是名称排序。
 *（11）-p/--no-sort：不对显示内容进行排序。
 *（12）-P/--portability：使用POSIX.2标准。
 *（13）-V/--version：查看版本。
 *（14）-l/–line-numbers: 对于每个符号，使用debug信息找到文件名和行号。
 *（15）-s/–print-armap：当列出库成员符号时，包含索引。索引的内容：模块和其包含名字的映射。
 *（16）-u/–undefined-only：只显示未定义符号；
 *（17）–defined-only: 只显示定义了的符号。
 */

/*3.nm命令打印的符号类型字母含义：
 *（1）A：符号的值是绝对值，不会被更改。
 *（2）B或b：未被初始化的全局数据，放在.bss段。
 *（3）D或d：已经初始化的全局数据。
 *（4）G或g：指被初始化的数据，特指small objects。
 *（5）I：另一个符号的间接参考。
 *（6）N：debugging符号。
 *（7）p：位于堆栈展开部分。
 *（8）R或r：属于只读存储区。
 *（9）S或s：指为初始化的全局数据，特指small objects。
 *（10）T或t：代码段的数据，即.test段。
 *（11）U：符号未定义。
 *（12）W或w：符号为弱符号，当系统有定义符号时，使用定义符号，当系统未定义符号且定义了弱符号时，使用弱符号。
 *（13）？：unknown符号
 *（14）如果是小写，符号通常是本地的；如果是大写，则符号是全局的（外部的）。然而对于一些特殊的全局符号显示
 *      为了小写符号（u、v和w）。
 */

/*4.nm add.o命令查看add.o对象文件中的符号输出：
 *    0000000000000000 b .bss
 *    0000000000000000 d .data
 *    0000000000000000 p .pdata
 *    0000000000000000 r .rdata$zzz
 *    0000000000000000 t .text
 *    0000000000000000 r .xdata
 *    0000000000000000 T add
 *    0000000000000000 ? add.c
 *
 *（1）最前面那一串数字就是地址。这些都是由操作系统分配的虚拟地址，操作系统内部会还有一个偏移地址
 *     来确定最终的分配到存储体上的物理地址。
 *（2）中间的字母是指符号类型，代表当前条目在内存中所在部分。
 *（3）最右边的就是对应的符号内容。
 *（4）符号类型d是已经初始化的全局数据，所以初始地址为0000000000000000。
 *（5）add函数是在.text代码段，该地址其实是相对于不同数据区的起始地址。
 *（6）nm命令输出每项信息格式：地址 符号类型 具体符号
 */

#ifndef _ADD_H
#define _ADD_H

int add(int x,int y);

#endif