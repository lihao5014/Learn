//为了避免同一个头文件被include包含多次，C/C++中有两种宏实现方式：一种是#ifndef方式；另一种是#pragma once方式。

/*1.#pragma once与#ifndef的区别：
 *（1）#ifndef的方式受C/C++语言标准支持。它不仅可以保证同一个文件不会被包含多次，
 *     也能保证内容完全相同的代码片段不会被不小心同时包含。
 *（2）#ifndef的缺点是如果不同头文件中的宏名不小心“撞车”，可能就会导致你看到头文件明明存在，
 *     但编译器却硬说找不到声明的状况。
 *（3）由于编译器每次都需要打开头文件才能判定是否有重复定义，因此在编译大型项目时，
 *     #ifndef会使得编译时间相对较长，因此一些编译器逐渐开始支持 #pragma once的方式。
 *（4）#pragma once一般由编译器提供保证，同一个文件不会被包含多次。注意这里所说的“同一个文件”
 *     是指物理上的一个文件，而不是指内容相同的两个文件。
 *（5）无法对一个头文件中的一段代码作#pragma once 声明，而只能针对整个文件。
 *（6）#pragma once的优点是不再担心宏名冲突了，当然也就不会出现宏名冲突引发的奇怪问题。
 *     大型项目的编译速度也因此提高了一些。
 *（7）#pragma once的缺点就是如果某个头文件有多份拷贝，则不能保证他们不被重复包含。
 *     当然相比宏名冲突引发的“找不到声明”的问题，这种重复包含很容易被发现并修正。
 *（8）#pragma once不支持跨平台，而#ifndef支持跨平台。
 */

/*2.#pragma once与#ifndef联系：
 *（1）#pragma once方式产生于#ifndef之后，因此很多人可能甚至没有听说过。目前看来#ifndef更受到推崇。
 *     因为#ifndef受C/C++语言标准的支持，不受编译器的任何限制。而#pragma once方式却不受一些较老版本的编译器支持，
 *     一些支持了的编译器又打算去掉它，所以它的兼容性可能不够好。
 *（2）一般程序员都会选择#ifndef方式，为了努力使得自己的代码“存活”时间更久，通常宁愿降低一些编译性能。
 **/

/*3.#pragma once与#ifndef混合使用：
 *    #pragma once
 *
 *    #ifndef __SOMEFILE_H__
 *    #define __SOMEFILE_H__
 *    
 *    .. ... // 声明、定义语句
 *    
 *    #endif
 *
 *（1）#pragma once和#ifndef混合使用看起来似乎是想兼有两者的优点。不过只要使用了#ifndef就会有宏名冲突的危险，
 *     也无法避免不支持#pragma once的编译器报错，所以混用两种方法似乎不能带来更多的好处，倒是会让一些不熟悉的人感到困惑。
 *（2）选择哪种避免头文件重复包含的方式，应该在了解两种方式的情况下，视具体情况而定。只要有一个合理的约定来避开缺点，
 *     我认为哪种方式都是可以接受的。而这个已经不是标准或者编译器的责任了，应当由程序员自己或者小范围内的开发规范来搞定。
 */
 
#pragma once

#pragma message("include foo.h once")

extern void foo(const char* str);

