/*1.在C/C++中在使用预编译指令#include的时候，为了防止重复引用造成二义性，通常有两种方式：
 *（1）第一种是#ifndef指令防止代码块重复引用。
 *（2）第二种就是在想要保护的文件开头写入#pragma once指令。
 */

/*2.#pragma once与#ifndef指令的优缺点：
 *（1）#ifndef方式是C/C++语言的标准支持，也是比较常用的方式。#ifndef的方式依赖于自定义的宏名不能冲突，
 *     它不光可以保证同一份文件不会被包含两次，也能够保证不同文件中完全相同的内容不会被包含两次。
 *     但如果自定义的宏不小心“重名”了，两份不同的文件使用同一个宏进行#ifndef，会导致编译器找不到声明的情况，
 *     被编译器判定为重定义而屏蔽了。
 *（2）由于编译器每次都需要打开头文件才能判定是否有重复定义，所以在编译大型项目时，#ifndef会使得编译时间相对较长。
 *     因此一些编译器逐渐开始支持#pragma once的方式。Visual Studio 2017新建头文件会自带#pragma once指令。
 *（3）#pragma once一般由编译器提供保证，同一个文件不会被包含多次。这里所说的”同一个文件”是指物理上的一个文件，
 *     而不是指内容相同的两个文件。无法对一个头文件中的一段代码作#pragma once声明，而只能针对整个文件。
 *     此方式不会出现宏名碰撞引发的奇怪问题，大型项目的编译速度也因此提供了一些。缺点是如果某个头文件有多份拷贝，
 *     该方法不能保证它们不被重复包含。在C/C++中#pragma once是一个非标准但是被广泛支持的方式。
 *（4） #pragma once方式产生于#ifndef之后。#ifndef方式受C/C++语言标准的支持，不受编译器的任何限制；
 *     而#pragma once方式有些较老编译器不支持，兼容性不够好。#ifndef可以针对一个文件中的部分代码，
 *     #pragma once只能针对整个文件。相对而言#ifndef更加灵活，兼容性好，#pragma once操作简单，效率高。
 */

#ifndef _BAR_H
#define _BAR_H

#include "foo.h"

#pragma message("include bar.h once")

extern void bar(const char* str);

#endif //_BAR_H