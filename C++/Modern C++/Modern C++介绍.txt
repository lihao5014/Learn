1.现代C++的改进：（现代C++指C++11/14/17/20，而C++98及其之前的C++特性均称之为传统C++）
（1）Modern C++为传统C++注入的大量特性使得整个C++变得更加像一门现代化的语言。不仅仅增强了C++语言自身的可用性，
     auto关键字语义的修改使得我们更加有信心来操控极度复杂的模板类型。同时还对语言运行期进行了大量的强化，
     lambda表达式的出现让C++具有了匿名函数的闭包特性，而这一特性几乎在现代的编程语言中已经司空见惯，
     右值引用的出现解决了C++长期以来被人诟病的临时对象效率问题等等。
（2）Modern C++还为自身的标准库增加了非常多的工具和方法。如在语言自身标准的层面上制定了thread，从而支持了并发编程，
     在不同平台上不再依赖于系统底层的API，实现了语言层面的跨平台支持；std::regex提供了完整的正则表达式支持等等。
     C++98已经被实践证明了是一种非常成功的范型，而现代C++的出现，则进一步推动这种范型，让C++成为系统程序设计和库
     开发更好的语言。concept提供了对模板参数编译期的检查，进一步增强了语言整体的可用性。


2.C++11中弃用的特性：
（1）不再允许字符串字面值常量赋值给一个char*。如果需要用字符串字面值常量赋值和初始化一个char*，
     应该使用const char*或者auto。
 ①  char *str = "hello world!";           //将出现弃用警告。
 ②  const char* str = "hello world!";     //任何版本的C++标准，都支持const char*写法。
 ③  auto str = "hello world!";            //C++11标准以上，支持auto写法。
（2）C++98异常说明、unexpected_handler、set_unexpected()等相关特性被弃用，应该使用noexcept。
（3）auto_ptr被弃用，应使用unique_ptr。
（4）register关键字被弃用，可以使用但不再具备任何实际含义。
（5）bool类型的 ++ 操作被弃用。
（6）如果一个类有析构函数，为其生成拷贝构造函数和拷贝赋值运算符的特性被弃用了。
（7）C语言风格的类型转换被弃用，应该使用static_cast、dynamic_cast、reinterpret_cast、const_cast来进行类型转换。
（8）在最新的C++17标准中弃用了一些可以使用的C标准库，例如<ccomplex>、<cstdalign>、<cstdbool>与<ctgmath>等。
（9）在编写C++时应该尽可能的避免使用诸如void*之类的程序风格。而在不得不使用C时，应该注意使用extern "C"这种特性，
     将C语言的代码与C++代码进行分离编译，再统一链接这种做法。