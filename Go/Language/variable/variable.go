/*1.Go语言变量：
 *（1）变量来源于数学，是计算机语言中能储存计算结果或能表示值抽象概念。变量可以通过变量名进行访问。
 *（2）Go语言变量名由字母、数字、下划线组成，其中首个字符不能为数字。
 *（3）声明变量的一般形式是使用var关键字，可以在一行中一次声明多个变量。
 *（4）Go语言是静态类型语言，因此变量是有明确类型的，编译器也会检查变量类型的正确性。在数学概念中，
 *     变量表示没有固定值且可改变的数。但从计算机系统实现角度来看，变量是一段或多段用来存储数据的内存。
 *（5）如果在定义一个变量num之前使用它，则会得到编译错误"undefined: num"。
 *（6）如果声明了一个局部变量num却没有在相同的代码块中使用它，同样会得到编译错误"num declared but not used"。
 *     此外单纯地给num赋值也是不够的，这个值必须被使用才会移除错误。但是全局变量是允许声明但不使用的。
 */

/*2.Go语言中变量的声明方式：
 *（1）标准格式："var 变量名 变量类型"，变量声明以关键字var开头，后置变量类型，行尾无须分号。
 *     指定变量类型，如果没有初始化，则变量默认为零值。零值就是变量没有做初始化时系统默认设置的值。
 *（2）批量格式：使用关键字var和括号，可以将一组变量定义放在一起。批量格式变量声明避免了每行都写var
 *     关键字的烦琐。这是一种为懒人提供的定义变量的方法，一般用于声明全局变量。
 *     	var (
 *     		变量名1 变量类型1
 *          变量名2 变量类型2
 *     	)
 *（3）类型推导格式："var 变量名 = 表达式"，根据值自行判定变量类型。使用类型推导格式定义变量时，
 *     必须显式初始化。
 *（4）简短格式："变量名 := 表达式"，使用简短格式定义变量时，需要显式初始化，且不能提供数据类型。
 *     简短格式变量声明只能用在函数内部。如果变量已经使用var声明过了，再使用":="声明变量就会产生
 *     编译错误。
 */

/*3.Go语言中变量的默认值：
 *（1）数值类型（包括complex64/128）默认值为0。
 *（2）布尔类型为默认值false。
 *（3）字符串为默认值为""空字符串。
 *（4）以下几种类型默认值为nil。
 *     var x *int
 *     var x []int
 *     var x map[string] int
 *     var x chan int
 *     var x func(string) int
 *     var x error                   //error是接口
 */

/*4.值类型和引用类型:
 *（1）所有像int、float、bool和string这些基本类型都属于值类型，使用这些类型的变量直接指向存在内存中的值。
 *     当使用等号"="将一个变量的值赋值给另一个变量时，实际上是在内存中将变量的值进行了拷贝。
 *（2）可以通过&i来获取变量i的内存地址。值类型变量的值存储在堆中。内存地址会根据机器的不同而有所不同，
 *     甚至相同的程序在不同的机器上执行后也会有不同的内存地址。因为每台机器可能有不同的存储器布局，
 *     并且位置分配也可能不同。
 *（3）更复杂的数据通常会需要使用多个字，这些数据一般使用引用类型保存。一个引用类型的变量存储的是值所在的
 *     内存地址（数字），或内存地址中第一个字所在的位置。这个内存地址称之为指针，这个指针实际上也被存在另
 *     外的某一个值中。
 *（4）同一个引用类型的指针指向的多个字可以是在连续的内存地址中（内存布局是连续的），这也是计算效率最高的
 *     一种存储形式；也可以将这些字分散存放在内存中，每个字都指示了下一个字所在的内存地址。
 *（5）当两个指针赋值时，只有地址被复制。如果其中一个指针指向的值被改变了，那么这个值的所有引用都会指向被
 *     修改后的内容。
 */

/*5.空白标识符'_'：
 *（1）空白标识符'_'也被用于抛弃值。
 *（2）空白标识符'_'实际上是一个只写变量，你不能得到它的值。这样做是因为Go语言中你必须使用所有被声明的变量，
 *     但有时你并不需要使用从一个函数得到的所有返回值。
 *（3）并行赋值也被用于当一个函数返回多个返回值时，搭配空白标识符'_'使用可以只获取指定位置的函数返回值。
 */
package main

import "fmt"
import "os"
import "unsafe"

var g_x, g_y int = 31,32                    //同一类型的多个变量可以声明在同一行，右边的这些值以相同的顺序赋值给左边的变量这被称为并行或同时赋值。
var g_m, g_n = 1.1414, "declare variable"

var (                     //这种因式分解关键字的写法一般用于声明全局变量
    g_a int = 25
    g_b bool = true
)

//简短格式变量定义只能在函数体中出现
//g_s, s_t := 'B', 200

func declareVarable(){
	var flag bool                            //布尔类型为默认值false
	fmt.Printf("flag =%t ,%T\n",flag,flag)
	
	var num float32                          //数值类型（整型、浮点型和复数）默认值为0
	fmt.Printf("num =%f ,%T\n",num,num)
	
	flag,num = true,0.618                    //可以在一行为多个不同类型的变量赋值，即多变量可以在同一行进行赋值
	fmt.Fprintf(os.Stdout,"flag =%t ,num =%f\n",flag,num)
	
	var x,y,z int = 5,10,15                  //使用var关键字可以在一行中一次声明多个相同类型的变量
	fmt.Fprintf(os.Stdout,"x =%d ,y =%d ,z =%d\n",x,y,z)
	
	var (                       //使用var加括号，可以一次声明多个不同类型的变量。
		a byte = 'a'
		b int = 21
		c float64 = 3.141596
	)
	fmt.Fprintf(os.Stdout,"a =%c ,b =%d ,c =%f\n",a,b,c)
	
	var value = 100                         //根据初始值自行判定变量类型。此时的var关键字相当于C++11中的auto
	fmt.Printf("m =%d\n",value)
	
	var m,n = true,"hello world"            //使用自动类型推导定义变量时，可以在一行中一次声明多个不同类型的变量
	fmt.Fprintf(os.Stdout,"m =%t ,n =%s\n",m,n)
	
	/*可以在变量的初始化时省略变量的类型而由系统自动推断，声明语句写上var关键字其实是显得有些多余了，
	 *因此我们可以将它们简写为"变量名 := 表达式"的格式。
	 */
	s := 2.71828
	fmt.Printf("s =%f , %T, %d\n",s,s,unsafe.Sizeof(s))
	
	/*简短格式是Go语言中使用变量的首选形式，但是它只能被用在函数体内，而不可以用于全局变量的声明与赋值。
	 *使用操作符":="可以高效地创建一个新的变量，称之为初始化声明。
	 */
	t,u,v := 'A',150,"go language"                 //t、u和v的类型（byte、int和string）将由编译器自动推断。
	fmt.Printf("t =%c , u =%d, v =%s\n",t,u,v)
	
	g_x += 5
	g_y *= 2
}

func main(){
	fmt.Printf("before declareVarable(): g_x =%d , g_y =%d\n",g_x,g_y)
	
	declareVarable()
	fmt.Printf("after declareVarable(): g_x =%d , g_y =%d\n",g_x,g_y)
	
	//如果想要交换两个变量的值，可以简单地使用"a, b = b, a"，两个变量的类型必须是相同。
	g_x,g_y = g_y,g_x
	fmt.Printf("global variable: g_x =%d , g_y =%d\n",g_x,g_y)
	
	_, ret_b, _, ret_d := numbers()      //空白标识符在函数返回值时的使用，只获取2、4位置的numbers()函数返回值
	fmt.Fprintf(os.Stdout,"ret_b =%d ,ret_d =%s\n",ret_b,ret_d)
}

func numbers()(rune,int,float64,string){
	a, b, c, d := 'R', 256, 1.732, "return multiple value"
	return a, b, c, d
}